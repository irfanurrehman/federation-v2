/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubernetes-sigs/federation-v2/pkg/apis/scheduling/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// JobSchedulingPreferenceLister helps list JobSchedulingPreferences.
type JobSchedulingPreferenceLister interface {
	// List lists all JobSchedulingPreferences in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.JobSchedulingPreference, err error)
	// JobSchedulingPreferences returns an object that can list and get JobSchedulingPreferences.
	JobSchedulingPreferences(namespace string) JobSchedulingPreferenceNamespaceLister
	JobSchedulingPreferenceListerExpansion
}

// jobSchedulingPreferenceLister implements the JobSchedulingPreferenceLister interface.
type jobSchedulingPreferenceLister struct {
	indexer cache.Indexer
}

// NewJobSchedulingPreferenceLister returns a new JobSchedulingPreferenceLister.
func NewJobSchedulingPreferenceLister(indexer cache.Indexer) JobSchedulingPreferenceLister {
	return &jobSchedulingPreferenceLister{indexer: indexer}
}

// List lists all JobSchedulingPreferences in the indexer.
func (s *jobSchedulingPreferenceLister) List(selector labels.Selector) (ret []*v1alpha1.JobSchedulingPreference, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.JobSchedulingPreference))
	})
	return ret, err
}

// JobSchedulingPreferences returns an object that can list and get JobSchedulingPreferences.
func (s *jobSchedulingPreferenceLister) JobSchedulingPreferences(namespace string) JobSchedulingPreferenceNamespaceLister {
	return jobSchedulingPreferenceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// JobSchedulingPreferenceNamespaceLister helps list and get JobSchedulingPreferences.
type JobSchedulingPreferenceNamespaceLister interface {
	// List lists all JobSchedulingPreferences in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.JobSchedulingPreference, err error)
	// Get retrieves the JobSchedulingPreference from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.JobSchedulingPreference, error)
	JobSchedulingPreferenceNamespaceListerExpansion
}

// jobSchedulingPreferenceNamespaceLister implements the JobSchedulingPreferenceNamespaceLister
// interface.
type jobSchedulingPreferenceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all JobSchedulingPreferences in the indexer for a given namespace.
func (s jobSchedulingPreferenceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.JobSchedulingPreference, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.JobSchedulingPreference))
	})
	return ret, err
}

// Get retrieves the JobSchedulingPreference from the indexer for a given namespace and name.
func (s jobSchedulingPreferenceNamespaceLister) Get(name string) (*v1alpha1.JobSchedulingPreference, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("jobschedulingpreference"), name)
	}
	return obj.(*v1alpha1.JobSchedulingPreference), nil
}
